#!/bin/bash
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" && pwd )"

# –í–µ—Ä—Å–∏—è –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ version.txt
VERSION=$(<"$SCRIPT_DIR/version.txt" 2>/dev/null || echo "dev")

# –¶–≤–µ—Ç–∞
RED='\e[31m'
YELLOW='\e[33m'
GREEN='\e[32m'
NC='\e[0m'

# ====== –§–£–ù–ö–¶–ò–Ø –°–ü–ò–ù–ù–ï–†–ê ======
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    local start_time
    start_time=$(date +%s)
    local min_duration=3
    echo -ne "${YELLOW}"
    while kill -0 "$pid" 2>/dev/null; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep "$delay"
        printf "\b\b\b\b\b\b"
    done
    local end_time
    end_time=$(date +%s)
    local elapsed=$((end_time - start_time))
    if [ $elapsed -lt $min_duration ]; then
        sleep $((min_duration - elapsed))
    fi
    echo -ne "${NC}"
}

# ====== –ù–ê–°–¢–†–û–ô–ö–ê –Ø–ó–´–ö–ê ======
CONFIG_DIR="$HOME/.config/remnawave"
LANG_FILE="$CONFIG_DIR/lang.conf"

if [ -f "$LANG_FILE" ]; then
    LANG_SET=$(<"$LANG_FILE")
else
    LANG_SET="en"  # fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
fi

# ====== –°–õ–û–í–ê–†–¨ ======
tr_text() {
    case "$LANG_SET" in
        "ru")
            case "$1" in
                MENU_GEN_IDS) echo "1) –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å shorts_id" ;;
                MENU_FLAG)    echo "2) –ü–æ–ª—É—á–∏—Ç—å emoji-—Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã" ;;
                MENU_UPDATE)  echo "3) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é/–æ–±–Ω–æ–≤–∏—Ç—å" ;;
                MENU_DELETE)  echo "4) –£–¥–∞–ª–∏—Ç—å rw-scripts" ;;
                MENU_EXIT)    echo "0) –í—ã–π—Ç–∏" ;;
                PROMPT_CHOICE) echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" ;;
                MSG_EXIT)     echo "–í—ã—Ö–æ–¥... –ü–æ–∫–∞ üëã" ;;
                ERR_CHOICE)   echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòÖ" ;;
                IDS_HOW_MANY) echo "–°–∫–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?" ;;
                ERR_NUMBER)   echo "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!" ;;
                ERR_GT_ZERO)  echo "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!" ;;
                IDS_DONE)     echo "ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–æ—Ç —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫:" ;;
                ERR_IDS)      echo "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏." ;;
                COUNTRY_PROMPT) echo "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –º–æ–∂–Ω–æ —á–∞—Å—Ç—å, 0 = –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é):" ;;
                NOTHING_FOUND)  echo "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É" ;;
                RESULTS)        echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:" ;;
                PROMPT_NUM)     echo "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (–∏–ª–∏ 0 –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞):" ;;
                ERR_NUM)        echo "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!" ;;
                ERR_NOT_FOUND)  echo "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º." ;;
                YOU_SELECTED)   echo "–í—ã –≤—ã–±—Ä–∞–ª–∏:" ;;
                CHECK_CURR)     echo "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:" ;;
                CHECK_LATEST)   echo "–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:" ;;
                UPDATE_AVAIL)   echo "–ï—Å—Ç—å –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è! –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è? (y/n)" ;;
                UPDATE_DONE)    echo "–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –≤–µ—Ä—Å–∏–∏" ;;
                UPDATE_RESTART) echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫..." ;;
                UPDATE_FAIL)    echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è." ;;
                NO_UPDATES)     echo "–£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è." ;;
                CONFIRM_DEL)    echo "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å rw-scripts? (y/n)" ;;
                CANCEL_DEL)     echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" ;;
            esac ;;
        "en" | *)
            case "$1" in
                MENU_GEN_IDS) echo "1) Generate shorts_id" ;;
                MENU_FLAG)    echo "2) Get country emoji flag" ;;
                MENU_UPDATE)  echo "3) Check version/update" ;;
                MENU_DELETE)  echo "4) Uninstall rw-scripts" ;;
                MENU_EXIT)    echo "0) Exit" ;;
                PROMPT_CHOICE) echo "Choose an action:" ;;
                MSG_EXIT)     echo "Exiting... Bye üëã" ;;
                ERR_CHOICE)   echo "Invalid choice, try again üòÖ" ;;
                IDS_HOW_MANY) echo "How many IDs to generate?" ;;
                ERR_NUMBER)   echo "Error: enter a valid number!" ;;
                ERR_GT_ZERO)  echo "Error: number must be greater than zero!" ;;
                IDS_DONE)     echo "IDs generated! Here is your list:" ;;
                ERR_IDS)      echo "An error occurred during generation." ;;
                COUNTRY_PROMPT) echo "Enter country name (English or Russian, part allowed, 0 = back to menu):" ;;
                NOTHING_FOUND)  echo "Nothing found for query" ;;
                RESULTS)        echo "Search results:" ;;
                PROMPT_NUM)     echo "Choose number (or 0 for new search):" ;;
                ERR_NUM)        echo "Enter a valid number!" ;;
                ERR_NOT_FOUND)  echo "No option with that number found." ;;
                YOU_SELECTED)   echo "You selected:" ;;
                CHECK_CURR)     echo "Current version:" ;;
                CHECK_LATEST)   echo "Latest version:" ;;
                UPDATE_AVAIL)   echo "New version available! Update? (y/n)" ;;
                UPDATE_DONE)    echo "Script updated to version" ;;
                UPDATE_RESTART) echo "Restarting..." ;;
                UPDATE_FAIL)    echo "Failed to check for updates." ;;
                NO_UPDATES)     echo "You already have the latest version." ;;
                CONFIRM_DEL)    echo "Are you sure you want to uninstall rw-scripts? (y/n)" ;;
                CANCEL_DEL)     echo "Uninstall canceled" ;;
            esac ;;
    esac
}

# ====== –ì–ï–ù–ï–†–ê–¶–ò–Ø SHORTS_ID ======
generate_ids() {
    echo "$(tr_text IDS_HOW_MANY)"
    read -r count
    if ! [[ "$count" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}$(tr_text ERR_NUMBER)${NC}"
        return
    fi
    if [ "$count" -le 0 ]; then
        echo -e "${RED}$(tr_text ERR_GT_ZERO)${NC}"
        return
    fi

    {
        for ((i=1; i<=count; i++)); do
            id=$(head -c 8 /dev/urandom | xxd -p)
            printf '"%s",\n' "$id"
        done
    } > /tmp/ids_output.txt &

    pid=$!
    spinner "$pid"
    wait "$pid"
    status=$?

    echo
    if [ $status -ne 0 ]; then
        echo -e "${RED}$(tr_text ERR_IDS)${NC}"
        return
    fi

    echo -e "${GREEN}$(tr_text IDS_DONE)${NC}\n"
    cat /tmp/ids_output.txt
    echo -e "\a"
}

# ====== ISO‚Üí–§–õ–ê–ì ======
iso_to_flag() {
    local country_code
    country_code=$(echo "$1" | tr '[:lower:]' '[:upper:]')
    for ((i=0; i<${#country_code}; i++)); do
        char=${country_code:i:1}
        code=$(( $(printf '%d' "'$char") - 65 + 0x1F1E6 ))
        printf "\\U%X" "$code"
    done
}

# ====== –ü–û–ò–°–ö –°–¢–†–ê–ù ======
country_lookup() {
    while true; do
        echo "$(tr_text COUNTRY_PROMPT)"
        read -r input
        [ "$input" = "0" ] && return
        key=$(echo "$input" | tr '[:upper:]' '[:lower:]')

        matches=$(awk -F',' -v key="$key" -v file="$SCRIPT_DIR/countries.csv" '
        BEGIN {
            i=0;
            while ((getline < file) > 0) {
                ru=tolower($1); en=tolower($2); iso=$3;
                gsub(/\r$/,"",ru); gsub(/\r$/,"",en);
                if (ru ~ key || en ~ key) {
                    i++;
                    result[i]=iso "," en;
                }
            }
            for (j=1; j<=i; j++) print result[j];
        }')

        if [ -z "$matches" ]; then
            echo -e "${RED}$(tr_text NOTHING_FOUND) '$input'.${NC}"
            continue
        fi

        echo -e "${GREEN}$(tr_text RESULTS)${NC}"
        i=1
        echo "$matches" | while IFS=',' read -r iso en; do
            flag=$(iso_to_flag "$iso")
            printf " %s) %s %s\n" "$i" "$flag" "$en"
            i=$((i+1))
        done > /tmp/matches_list.txt

        cat /tmp/matches_list.txt
        echo "$(tr_text PROMPT_NUM)"
        read -r choice

        [ "$choice" = "0" ] && continue
        if ! [[ "$choice" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}$(tr_text ERR_NUM)${NC}"
            continue
        fi

        selected=$(sed -n "${choice}p" /tmp/matches_list.txt | cut -d' ' -f2-)
        if [ -z "$selected" ]; then
            echo -e "${RED}$(tr_text ERR_NOT_FOUND)${NC}"
            continue
        fi

        echo -e "${YELLOW}$(tr_text YOU_SELECTED)${NC} $selected"
        return
    done
}

# ====== –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ======
check_update() {
    local latest
    latest=$(curl -s https://raw.githubusercontent.com/detective-noir-dev/Remnawave-Scripts/main/version.txt)

    if [ -z "$latest" ]; then
        echo -e "${RED}$(tr_text UPDATE_FAIL)${NC}"
        return
    fi

    echo "$(tr_text CHECK_CURR) $VERSION"
    echo "$(tr_text CHECK_LATEST) $latest"

    if [ "$VERSION" != "$latest" ]; then
        echo -e "${YELLOW}$(tr_text UPDATE_AVAIL)${NC}"
        read -r ans
        if [[ "$ans" =~ ^[Yy–î–¥]$ ]]; then
            curl -s -o "$SCRIPT_DIR/scripts.sh" https://raw.githubusercontent.com/detective-noir-dev/Remnawave-Scripts/main/scripts.sh
            curl -s -o "$SCRIPT_DIR/version.txt" https://raw.githubusercontent.com/detective-noir-dev/Remnawave-Scripts/main/version.txt
            chmod +x "$SCRIPT_DIR/scripts.sh"
            echo -e "${GREEN}$(tr_text UPDATE_DONE) $latest${NC}"
            echo -e "${YELLOW}$(tr_text UPDATE_RESTART)${NC}"
            exec "$SCRIPT_DIR/scripts.sh"
        fi
    else
        echo -e "${GREEN}$(tr_text NO_UPDATES)${NC}"
    fi
}

# ====== –£–î–ê–õ–ï–ù–ò–ï ======
delete_self() {
    # –ó–∞–ø—É—Å–∫–∞–µ–º uninstall.sh –∏ —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    "$SCRIPT_DIR/uninstall.sh"
    exit 0
}

# ====== –ú–ï–ù–Æ ======
show_menu() {
    tr_text PROMPT_CHOICE
    tr_text MENU_GEN_IDS
    tr_text MENU_FLAG
    tr_text MENU_UPDATE
    tr_text MENU_DELETE
    tr_text MENU_EXIT
    read -r choice
    case $choice in
        1) generate_ids ;;
        2) country_lookup ;;
        3) check_update ;;
        4) delete_self ;;   # <--- –∑–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ uninstall.sh
        0) tr_text MSG_EXIT; exit 0 ;;
        *) echo -e "${RED}$(tr_text ERR_CHOICE)${NC}" ;;
    esac
}

# ====== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ======
while true; do
    show_menu
done